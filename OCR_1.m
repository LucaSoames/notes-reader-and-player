Image = imread('HotCrossBuns.jpg');

%%
%%BW, maskedPattern = createMask(Image)
I = rgb2gray(Image);

I2 = im2bw(Image, 0.7);

imshow(Image)
figure
imshow(I2)
figure
imshow(I)

%%

%%colorThresholder(Image);
 
[x, y] = createMask2(Image)
%imshow(x)
%z = Image & x
%%imshow(y)

W = x((160:230), (162:200));
imshow(W)

%%
Image = imread('HotCrossBuns.jpg');
[x, y] = createMask2(Image)
W = x((160:230), (162:200));
Map = zeros(71,500);
Map(1:71, 1:39) = W
Map(20:21, :) = 1
Map(28:29, :) = 1
Map(36:37, :) = 1
Map(44:45, :) = 1
Map(52:53, :) = 1
BackGroundNote = Map(:, 40:51)

Ball = readmatrix('ball.csv')
Ball = logical(Ball(1:8,1:12))

%%
Notes = [F A C E]
imshow(Notes)

%%

imshow(Ball)




%%
E = BackGroundNote
E(21:28,:) = E(21:28,:) | Ball

C = BackGroundNote
C(29:36,:) = C(29:36,:) | Ball

A = BackGroundNote
A(37:44,:) = A(37:44,:) | Ball

F = BackGroundNote
F(45:52,:) = F(45:52,:) | Ball

FL = BackGroundNote
FL(17:24,:) = FL(17:24,:) | Ball

DL = BackGroundNote
DL(25:32,:) = DL(25:32,:) | Ball

BL = BackGroundNote
BL(33:40,:) = BL(33:40,:) | Ball

GL = BackGroundNote
GL(41:48,:) = GL(41:48,:) | Ball

EL = BackGroundNote
EL(49:56,:) = EL(49:56,:) | Ball

%%

W2 = W;

Map = zeros(71,500);
%A(119:121, 119:121) = flipud(fliplr(pattern));

Map(1:71, 1:39) = W
%%

Map2 = Map;
Map2(20:21, :) = 1
Map2(28:29, :) = 1
Map2(36:37, :) = 1
Map2(44:45, :) = 1
Map2(51:52, :) = 1
imshow(Map2)

%%
%imshow(x)
Note = x((190:200), (223:238));
imshow(Note)
%%
B = readmatrix('ball.csv')
B2 = B(1:9,1:12)
B3 = logical(B2)



%%



%%
function [BW,maskedRGBImage] = createMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 17-May-2022
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.000;
channel1Max = 1.000;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.000;
channel2Max = 0.077;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.000;
channel3Max = 1.000;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end

%%
function [BW,maskedRGBImage] = createMask2(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 17-May-2022
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.000;
channel1Max = 0.009;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.000;
channel2Max = 1.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.000;
channel3Max = 0.810;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end
